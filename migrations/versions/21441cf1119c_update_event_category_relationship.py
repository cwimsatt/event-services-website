"""Update event category relationship

Revision ID: 21441cf1119c
Revises: 
Create Date: 2024-12-04 23:29:15.489031

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '21441cf1119c'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # Create categories from existing event categories
    connection = op.get_bind()
    
    # Get existing categories from events
    result = connection.execute(
        sa.text('SELECT DISTINCT category FROM event WHERE category IS NOT NULL')
    ).fetchall()
    existing_categories = [row[0] for row in result if row[0]]

    # Create category mapping
    category_mapping = {}
    for category_name in existing_categories:
        # Insert category and get its id
        result = connection.execute(
            sa.text(
                'INSERT INTO category (name, slug, description) '
                'VALUES (:name, :slug, :description) RETURNING id'
            ),
            {
                "name": category_name,
                "slug": category_name.lower().replace(' ', '-'),
                "description": f"{category_name} events"
            }
        )
        category_id = result.scalar()
        category_mapping[category_name] = category_id

    # Add category_id column as nullable first
    with op.batch_alter_table('event', schema=None) as batch_op:
        batch_op.add_column(sa.Column('category_id', sa.Integer(), nullable=True))
        batch_op.create_foreign_key(None, 'category', ['category_id'], ['id'])

    # Update events with category_id
    for category_name, category_id in category_mapping.items():
        connection.execute(
            sa.text(
                'UPDATE event SET category_id = :category_id '
                'WHERE category = :category_name'
            ),
            {"category_id": category_id, "category_name": category_name}
        )

    # Make category_id non-nullable
    with op.batch_alter_table('event', schema=None) as batch_op:
        batch_op.alter_column('category_id', nullable=False)
        batch_op.drop_column('category')


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('event', schema=None) as batch_op:
        batch_op.add_column(sa.Column('category', sa.VARCHAR(length=50), autoincrement=False, nullable=False))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_column('category_id')

    # ### end Alembic commands ###
